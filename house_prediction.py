# -*- coding: utf-8 -*-
"""House prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uaLC5W3Htkpya34bnRVspzz8D3dvX6Ti
"""

#pip install scikit-learn==0.24.1

# Commented out IPython magic to ensure Python compatibility.
#importing required libraires
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline
import matplotlib
matplotlib.rcParams["figure.figsize"]=(20,10)

#loading the csv file and showing the first 6 records
df1=pd.read_csv('banglore.csv')
df1.head()

df1.shape

df1=df1.drop(['availability','society','balcony','area_type'],axis='columns')

df3=df1.dropna()
df3.isnull().sum()

df3['bhk']=df3['size'].apply(lambda x: int(x.split(' ')[0]))
df3.head()

df3=df3.drop(['size'],axis='columns')
df3['bhk'].unique()

def is_float(x):
  try:
    float(x)
  except:
    return False
  return True

df3[~df3['total_sqft'].apply(is_float)].head(20)

def convert_sqft_to_num(x):
  token=x.split('-')
  if len(token)==2:
    return float(token[0])+float(token[1])/2
  try:
    return float(x)
  except:
    return None

df4=df3.copy()
df4['total_sqft']=df4['total_sqft'].apply(convert_sqft_to_num)
df4.loc[990]

df5=df4.copy()
df5['price_per_sqft']=df5['price']*100000/df5['total_sqft']
df5.head(20)

df5.location=df5.location.apply(lambda x: x.strip())
location_stats=df5.groupby('location')['location'].agg('count').sort_values(ascending=False)
location_stats

lstats_less_than_10=location_stats[location_stats<10]
location_stats

df5.location=df5.location.apply(lambda x:'other' if x in lstats_less_than_10 else x)
df5.head(10)

df6=df5[~(df5.total_sqft/df5.bhk<300)]
df6.head()

def remove_pps_outliers(df):
  df_out=pd.DataFrame()
  for key,subdf in df.groupby('location'):
    m=np.mean(subdf.price_per_sqft)
    st=np.std(subdf.price_per_sqft)
    reduced_df=subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]
    df_out=pd.concat([df_out,reduced_df],ignore_index=True)
  return df_out

df7=remove_pps_outliers(df6)
df7.head()
df7.shape

def plot_scatter_chart(df,location):
  bhk2=df[(df.location==location)&(df.bhk==2)]
  bhk3=df[(df.location==location)&(df.bhk==3)]
  matplotlib.rcParams['figure.figsize']=(15,10)
  plt.scatter(bhk2.total_sqft,bhk2.price_per_sqft,s=50,c='blue',marker='+',label='2 bhk')
  plt.scatter(bhk3.total_sqft,bhk3.price_per_sqft,s=50,c='green',label='3 bhk')
  plt.xlabel('Total Square feet area')
  plt.ylabel('Price per square feet')
  plt.title(location)
  plt.legend()
plot_scatter_chart(df7,'Whitefield')

def remove_bhk_outliers(df):
    exclude_indices = np.array([])
    for location, location_df in df.groupby('location'):
        bhk_stats = {}
        for bhk, bhk_df in location_df.groupby('bhk'):
            bhk_stats[bhk] = {
                'mean': np.mean(bhk_df.price_per_sqft),
                'std': np.std(bhk_df.price_per_sqft),
                'count': bhk_df.shape[0]
            }
        for bhk, bhk_df in location_df.groupby('bhk'):
            stats = bhk_stats.get(bhk-1)
            if stats and stats['count']>5:
                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
    return df.drop(exclude_indices,axis='index')

df8=remove_bhk_outliers(df7)
df8.shape

plot_scatter_chart(df8,'Whitefield')

df8[df8.bath>10]

df9=df8[df8.bath<df8.bhk+2]
df9.shape

df9=df9.drop(['price_per_sqft'],axis='columns')
df9.head()

dummies=pd.get_dummies(df9.location)
dummies

df9=pd.concat([df9,dummies.drop('other',axis='columns')],axis='columns')
df9.head(3)

df10=df9.drop('location',axis='columns')
df10.shape

x=df10.drop('price',axis='columns')
x.shape

y=df10.price
y.shape
y.head(20)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=10)

#model accuracy using linear regression
from sklearn.linear_model import LinearRegression
lr_clf=LinearRegression()
lr_clf.fit(X_train,y_train)
lr_clf.score(X_test,y_test)

#model accuracy using k crosss variance in linear regression 
#basically training the model k times at a time 
from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import cross_val_score
cv=ShuffleSplit(n_splits=5,test_size=0.2,random_state=0)
cross_val_score(LinearRegression(),x,y,cv=cv)

x.columns=='channasandra'
np.where(x.columns=='channasandra')

import pickle
with open('house_prices_model.pickle','wb') as f:
  pickle.dump(lr_clf,f)

def predict_price(location,sqft,bath,bhk):    
    loc_index = np.where(x.columns==location)[0][0]

    c = np.zeros(len(x.columns))
    c[0] = sqft
    c[1] = bath
    c[2] = bhk
    if loc_index >= 0:
        c[loc_index] = 1

    return lr_clf.predict([c])[0]

predict_price('5th phase jp nagar',1200,2,2)

import json
columns = {
    'data_columns':[col.lower() for col in x.columns]
}
with open('columns.json','w') as f:
  f.write(json.dumps(columns))